// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  ara               Ara       @relation(fields: [araCode], references: [id])
  araCode           String    @unique
  email             String    @unique
  password          String
  role              Role      @default(BASIC)
  center            Center    @relation("onSiteStudents", fields: [centerId], references: [id]) // 1 to Many
  centerId          String
  field             Field     @relation("StudentsInTheFields", fields: [fieldId], references: [id]) // 1 to Many
  fieldId           String
  blackListed       Boolean   @default(false)
  journeyDriver     Journey[] @relation("drivers") // Many to 1
  journeyPassengers Journey[]
  messages          Message[] @relation("messageAuthor") // Many to 1
}

model Center {
  id         String    @id @default(uuid())
  city       String
  students   User[]    @relation("onSiteStudents") // Many to 1
  field      Field[] // Many to Many
  departures Journey[] @relation("departures") // Many to 1
  arrivals   Journey[] @relation("arrivals") // Many to 1
  isCenter   Boolean
}

model Field {
  id       String   @id @default(uuid())
  name     String
  students User[]   @relation("StudentsInTheFields") // Many to 1
  center   Center[] // Many to Many
}

model Journey {
  id                   String   @id @default(uuid())
  departure            Center   @relation("departures", fields: [departureId], references: [id]) // 1 to Many
  departureId          String
  arrival              Center   @relation("arrivals", fields: [arrivalId], references: [id]) // 1 to Many
  arrivalId            String
  departureTime        DateTime
  EstimatedArrivalTime DateTime
  driver               User     @relation("drivers", fields: [driverId], references: [id]) // 1 to Many
  driverId             String
  passengers           User[]
}

model Topic {
  id       String    @id @default(uuid())
  title    String
  closed   Boolean
  messages Message[] @relation("messages") // Many to 1
}

model Message {
  id       String   @id @default(uuid())
  author   User     @relation("messageAuthor", fields: [authorId], references: [id]) // 1 to Many
  authorId String
  content  String
  date     DateTime
  topic    Topic    @relation("messages", fields: [topicId], references: [id]) // 1 to Many
  topicId  String
}

model Ara {
  id      String @unique
  user    User?
  name    String
  surname String
}

enum Role {
  BASIC
  ADMIN
}
